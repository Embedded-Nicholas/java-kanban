package ru.yandex.practicum.manager.task;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.yandex.practicum.model.EpicTask;
import ru.yandex.practicum.model.SubTask;
import ru.yandex.practicum.model.Task;
import ru.yandex.practicum.util.Managers;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {
    private static TaskManager taskManager;

    private static final Task task = new Task("Задача", "Описание");
    private static final EpicTask epicTask = new EpicTask("Эпик", "Описание");
    private static final SubTask subTask = new SubTask("Подзадача", "Описание", epicTask.getId());


    @BeforeAll
    static void init() {
        taskManager = Managers.getDefault();
    }

    @BeforeEach
    void cleanTaskManager() {
        taskManager.removeAllTasks();
    }

    @Test
    void deleteTaskByUUID(){
        taskManager.add(task);
        taskManager.deleteTaskByUUID(task.getId());
        assertEquals(0, taskManager.getAllTasks().size());
    }

    @Test
    void deleteEpicTaskByUUID(){
        taskManager.add(epicTask);
        taskManager.add(subTask);
        taskManager.deleteTaskByUUID(epicTask.getId());
        assertEquals(0, taskManager.getAllTasks().size());
    }

    @Test
    void deleteSubTaskByUUID(){
        taskManager.add(epicTask);
        taskManager.add(subTask);
        taskManager.deleteTaskByUUID(subTask.getId());
        assertAll(
                () -> assertEquals(1, taskManager.getAllTasks().size()),
                () -> assertEquals(epicTask, taskManager.getAllTasks().getFirst())
        );
    }

    @Test
    void add() {
        this.addTasks();
        assertAll(
                () -> assertTrue(taskManager.getSpecialTypeTasks(Task.class).contains(task), "Обычная задача не найдена"),
                () -> assertTrue(taskManager.getSpecialTypeTasks(EpicTask.class).contains(epicTask), "Эпик не найден"),
                () -> assertTrue(taskManager.getSpecialTypeTasks(SubTask.class).contains(subTask), "Подзадача не найдена"),
                () -> assertEquals(3, taskManager.getAllTasks().size(), "Неверное количество задач.")
        );
    }

    @Test
    void findTaskById() {
        this.addTasks();

        assertAll(
                () -> assertEquals(task.getId(), taskManager.getTaskByUUID(task.getId()).getId()),
                () -> assertEquals(epicTask.getId(), taskManager.getTaskByUUID(epicTask.getId()).getId()),
                () -> assertEquals(subTask.getId(), taskManager.getTaskByUUID(subTask.getId()).getId())
        );
    }

    @Test
    void shouldNotConflictBetweenManualAndAutoGeneratedIds() {
        Task taskWithAutoId = new Task("Задача 1", "Описание 1");
        taskManager.add(taskWithAutoId);
        UUID autoGeneratedId = taskWithAutoId.getId();

        Task taskWithManualId = new Task("Задача 2", "Описание 2");
        taskWithManualId.setId(autoGeneratedId);
        taskManager.add(taskWithManualId);

        Task retrievedTask = taskManager.getTaskByUUID(autoGeneratedId);
        assertAll(
                () -> assertEquals("Задача 2", retrievedTask.getName(), "Задача не была заменена"),
                () -> assertEquals(1, taskManager.getAllTasks().size(), "В менеджере есть дубликаты задач")
        );
    }

    @Test
    void addedSimpleTaskRemainsUnchanged() {
        taskManager.add(task);

        Task retrievedTask = taskManager.getTaskByUUID(task.getId());

        assertAll(
                () -> assertEquals(task.getId(), retrievedTask.getId(), "ID изменился"),
                () -> assertEquals(task.getName(), retrievedTask.getName(), "Имя изменилось"),
                () -> assertEquals(task.getDescription(), retrievedTask.getDescription(), "Описание изменилось"),
                () -> assertEquals(task.getStatus(), retrievedTask.getStatus(), "Статус изменился")
        );
    }

    @Test
    void addedEpicTaskRemainsUnchanged() {
        taskManager.add(epicTask);
        taskManager.add(subTask);

        Task retrievedTask = taskManager.getTaskByUUID(epicTask.getId());

        assertAll(
                () -> assertEquals(epicTask.getId(), retrievedTask.getId(), "ID изменился"),
                () -> assertEquals(epicTask.getName(), retrievedTask.getName(), "Имя изменилось"),
                () -> assertEquals(epicTask.getDescription(), retrievedTask.getDescription(), "Описание изменилось"),
                () -> assertEquals(epicTask.getStatus(), retrievedTask.getStatus(), "Статус изменился"),
                () -> assertEquals(epicTask.getSubTasksIdList().get(0), subTask.getId())
        );
    }

    @Test
    void addedSubTaskRemainsUnchanged() {
        taskManager.add(epicTask);
        taskManager.add(subTask);

        Task retrievedTask = taskManager.getTaskByUUID(subTask.getId());

        assertAll(
                () -> assertEquals(subTask.getId(), retrievedTask.getId(), "ID изменился"),
                () -> assertEquals(subTask.getName(), retrievedTask.getName(), "Имя изменилось"),
                () -> assertEquals(subTask.getDescription(), retrievedTask.getDescription(), "Описание изменилось"),
                () -> assertEquals(subTask.getStatus(), retrievedTask.getStatus(), "Статус изменился"),
                () -> assertEquals(subTask.getEpicTaskId(), epicTask.getId())
        );
    }

    private void addTasks() {
        taskManager.add(task);
        taskManager.add(epicTask);
        taskManager.add(subTask);
    }
}