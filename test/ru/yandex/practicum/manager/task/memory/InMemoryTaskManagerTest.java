package ru.yandex.practicum.manager.task.memory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.yandex.practicum.manager.task.TaskManager;
import ru.yandex.practicum.model.EpicTask;
import ru.yandex.practicum.model.SubTask;
import ru.yandex.practicum.model.Task;
import ru.yandex.practicum.manager.util.Managers;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {
    private TaskManager taskManager;
    private Task task;
    private EpicTask epicTask;
    private SubTask subTask;

    @BeforeEach
    void init() {
        taskManager = Managers.getDefault();
        task = new Task("Task", "Description");
        epicTask = new EpicTask("Epic", "Description");
        subTask = new SubTask("Subtask", "Description", epicTask.getId());
    }

    @Test
    void removeAllTasks() {
        this.addTasks();
        taskManager.removeAllTasks();
        assertEquals(0, taskManager.getAllTasks().size(), "All tasks should be removed");
    }

    @Test
    void deleteTaskByUUID() {
        taskManager.add(task);
        taskManager.deleteTaskByUUID(task.getId());
        assertEquals(0, taskManager.getAllTasks().size(), "Task should be deleted");
    }

    @Test
    void deleteEpicTaskByUUID() {
        taskManager.add(epicTask);
        taskManager.add(subTask);
        taskManager.deleteTaskByUUID(epicTask.getId());
        assertEquals(0, taskManager.getAllTasks().size(), "Epic and its subtasks should be deleted");
    }

    @Test
    void deleteSubTaskByUUID() {
        taskManager.add(epicTask);
        taskManager.add(subTask);
        taskManager.deleteTaskByUUID(subTask.getId());
        assertAll(
                () -> assertEquals(1, taskManager.getAllTasks().size(), "Only Epic should remain"),
                () -> assertEquals(epicTask, taskManager.getAllTasks().getFirst(), "Epic should be unchanged")
        );
    }

    @Test
    void add() {
        addTasks();
        assertAll(
                () -> assertTrue(taskManager.getTasksByType(Task.class).contains(task),
                        "Task should be present in the manager"),
                () -> assertTrue(taskManager.getTasksByType(EpicTask.class).contains(epicTask),
                        "Epic should be present in the manager"),
                () -> assertTrue(taskManager.getTasksByType(SubTask.class).contains(subTask),
                        "Subtask should be present in the manager"),
                () -> assertEquals(3, taskManager.getAllTasks().size(),
                        "Total tasks count should be 3")
        );
    }

    @Test
    void findTaskById() {
        addTasks();

        assertAll(
                () -> assertEquals(task.getId(), taskManager.getTaskByUUID(task.getId()).getId(),
                        "Task ID should match"),
                () -> assertEquals(epicTask.getId(), taskManager.getTaskByUUID(epicTask.getId()).getId(),
                        "Epic ID should match"),
                () -> assertEquals(subTask.getId(), taskManager.getTaskByUUID(subTask.getId()).getId(),
                        "Subtask ID should match")
        );
    }

    @Test
    void shouldNotConflictBetweenManualAndAutoGeneratedIds() {
        Task taskWithAutoId = new Task("Task 1", "Description 1");
        taskManager.add(taskWithAutoId);
        UUID autoGeneratedId = taskWithAutoId.getId();

        Task taskWithManualId = new Task("Task 2", "Description 2");
        taskWithManualId.setId(autoGeneratedId);
        taskManager.add(taskWithManualId);

        Task retrievedTask = taskManager.getTaskByUUID(autoGeneratedId);
        assertAll(
                () -> assertEquals("Task 2", retrievedTask.getName(), "Task with manual ID should replace the old one"),
                () -> assertEquals(1, taskManager.getAllTasks().size(), "Manager should not contain duplicate tasks")
        );
    }

    @Test
    void addedSimpleTaskRemainsUnchanged() {
        taskManager.add(task);

        Task retrievedTask = taskManager.getTaskByUUID(task.getId());

        assertAll(
                () -> assertEquals(task.getId(), retrievedTask.getId(), "Task ID should not change"),
                () -> assertEquals(task.getName(), retrievedTask.getName(), "Task name should not change"),
                () -> assertEquals(task.getDescription(), retrievedTask.getDescription(),
                        "Task description should not change"),
                () -> assertEquals(task.getStatus(), retrievedTask.getStatus(), "Task status should not change")
        );
    }

    @Test
    void addedEpicTaskRemainsUnchanged() {
        taskManager.add(epicTask);
        taskManager.add(subTask);

        Task retrievedTask = taskManager.getTaskByUUID(epicTask.getId());

        assertAll(
                () -> assertEquals(epicTask.getId(), retrievedTask.getId(), "Epic ID should not change"),
                () -> assertEquals(epicTask.getName(), retrievedTask.getName(), "Epic name should not change"),
                () -> assertEquals(epicTask.getDescription(), retrievedTask.getDescription(),
                        "Epic description should not change"),
                () -> assertEquals(epicTask.getStatus(), retrievedTask.getStatus(), "Epic status should not change"),
                () -> assertEquals(epicTask.getSubTasksIdList().get(0), subTask.getId(),
                        "Epic should contain the subtask ID")
        );
    }

    @Test
    void addedSubTaskRemainsUnchanged() {
        taskManager.add(epicTask);
        taskManager.add(subTask);

        Task retrievedTask = taskManager.getTaskByUUID(subTask.getId());

        assertAll(
                () -> assertEquals(subTask.getId(), retrievedTask.getId(), "Subtask ID should not change"),
                () -> assertEquals(subTask.getName(), retrievedTask.getName(), "Subtask name should not change"),
                () -> assertEquals(subTask.getDescription(), retrievedTask.getDescription(),
                        "Subtask description should not change"),
                () -> assertEquals(subTask.getStatus(), retrievedTask.getStatus(), "Subtask status should not change"),
                () -> assertEquals(subTask.getEpicTaskId(), epicTask.getId(),
                        "Subtask should reference the correct Epic")
        );
    }

    private void addTasks() {
        taskManager.add(task);
        taskManager.add(epicTask);
        taskManager.add(subTask);
    }
}